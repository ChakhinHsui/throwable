/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.seava.throwable.server.thrift.rpc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class BackMSG implements org.apache.thrift.TBase<BackMSG, BackMSG._Fields>, java.io.Serializable, Cloneable, Comparable<BackMSG> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BackMSG");

  private static final org.apache.thrift.protocol.TField RPID_FIELD_DESC = new org.apache.thrift.protocol.TField("rpid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField BACK_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("backCode", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField BACK_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("backMap", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField BACK_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("backList", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField ERROR_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("errorCode", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BackMSGStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BackMSGTupleSchemeFactory());
  }

  public String rpid; // required
  /**
   * 
   * @see BackCode
   */
  public BackCode backCode; // required
  public String msg; // required
  public Map<String,String> backMap; // required
  public List<String> backList; // required
  public String errorCode; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RPID((short)1, "rpid"),
    /**
     * 
     * @see BackCode
     */
    BACK_CODE((short)2, "backCode"),
    MSG((short)3, "msg"),
    BACK_MAP((short)4, "backMap"),
    BACK_LIST((short)5, "backList"),
    ERROR_CODE((short)6, "errorCode");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RPID
          return RPID;
        case 2: // BACK_CODE
          return BACK_CODE;
        case 3: // MSG
          return MSG;
        case 4: // BACK_MAP
          return BACK_MAP;
        case 5: // BACK_LIST
          return BACK_LIST;
        case 6: // ERROR_CODE
          return ERROR_CODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RPID, new org.apache.thrift.meta_data.FieldMetaData("rpid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BACK_CODE, new org.apache.thrift.meta_data.FieldMetaData("backCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, BackCode.class)));
    tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BACK_MAP, new org.apache.thrift.meta_data.FieldMetaData("backMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.BACK_LIST, new org.apache.thrift.meta_data.FieldMetaData("backList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ERROR_CODE, new org.apache.thrift.meta_data.FieldMetaData("errorCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BackMSG.class, metaDataMap);
  }

  public BackMSG() {
  }

  public BackMSG(
    String rpid,
    BackCode backCode,
    String msg,
    Map<String,String> backMap,
    List<String> backList,
    String errorCode)
  {
    this();
    this.rpid = rpid;
    this.backCode = backCode;
    this.msg = msg;
    this.backMap = backMap;
    this.backList = backList;
    this.errorCode = errorCode;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BackMSG(BackMSG other) {
    if (other.isSetRpid()) {
      this.rpid = other.rpid;
    }
    if (other.isSetBackCode()) {
      this.backCode = other.backCode;
    }
    if (other.isSetMsg()) {
      this.msg = other.msg;
    }
    if (other.isSetBackMap()) {
      Map<String,String> __this__backMap = new HashMap<String,String>(other.backMap);
      this.backMap = __this__backMap;
    }
    if (other.isSetBackList()) {
      List<String> __this__backList = new ArrayList<String>(other.backList);
      this.backList = __this__backList;
    }
    if (other.isSetErrorCode()) {
      this.errorCode = other.errorCode;
    }
  }

  public BackMSG deepCopy() {
    return new BackMSG(this);
  }

  @Override
  public void clear() {
    this.rpid = null;
    this.backCode = null;
    this.msg = null;
    this.backMap = null;
    this.backList = null;
    this.errorCode = null;
  }

  public String getRpid() {
    return this.rpid;
  }

  public BackMSG setRpid(String rpid) {
    this.rpid = rpid;
    return this;
  }

  public void unsetRpid() {
    this.rpid = null;
  }

  /** Returns true if field rpid is set (has been assigned a value) and false otherwise */
  public boolean isSetRpid() {
    return this.rpid != null;
  }

  public void setRpidIsSet(boolean value) {
    if (!value) {
      this.rpid = null;
    }
  }

  /**
   * 
   * @see BackCode
   */
  public BackCode getBackCode() {
    return this.backCode;
  }

  /**
   * 
   * @see BackCode
   */
  public BackMSG setBackCode(BackCode backCode) {
    this.backCode = backCode;
    return this;
  }

  public void unsetBackCode() {
    this.backCode = null;
  }

  /** Returns true if field backCode is set (has been assigned a value) and false otherwise */
  public boolean isSetBackCode() {
    return this.backCode != null;
  }

  public void setBackCodeIsSet(boolean value) {
    if (!value) {
      this.backCode = null;
    }
  }

  public String getMsg() {
    return this.msg;
  }

  public BackMSG setMsg(String msg) {
    this.msg = msg;
    return this;
  }

  public void unsetMsg() {
    this.msg = null;
  }

  /** Returns true if field msg is set (has been assigned a value) and false otherwise */
  public boolean isSetMsg() {
    return this.msg != null;
  }

  public void setMsgIsSet(boolean value) {
    if (!value) {
      this.msg = null;
    }
  }

  public int getBackMapSize() {
    return (this.backMap == null) ? 0 : this.backMap.size();
  }

  public void putToBackMap(String key, String val) {
    if (this.backMap == null) {
      this.backMap = new HashMap<String,String>();
    }
    this.backMap.put(key, val);
  }

  public Map<String,String> getBackMap() {
    return this.backMap;
  }

  public BackMSG setBackMap(Map<String,String> backMap) {
    this.backMap = backMap;
    return this;
  }

  public void unsetBackMap() {
    this.backMap = null;
  }

  /** Returns true if field backMap is set (has been assigned a value) and false otherwise */
  public boolean isSetBackMap() {
    return this.backMap != null;
  }

  public void setBackMapIsSet(boolean value) {
    if (!value) {
      this.backMap = null;
    }
  }

  public int getBackListSize() {
    return (this.backList == null) ? 0 : this.backList.size();
  }

  public java.util.Iterator<String> getBackListIterator() {
    return (this.backList == null) ? null : this.backList.iterator();
  }

  public void addToBackList(String elem) {
    if (this.backList == null) {
      this.backList = new ArrayList<String>();
    }
    this.backList.add(elem);
  }

  public List<String> getBackList() {
    return this.backList;
  }

  public BackMSG setBackList(List<String> backList) {
    this.backList = backList;
    return this;
  }

  public void unsetBackList() {
    this.backList = null;
  }

  /** Returns true if field backList is set (has been assigned a value) and false otherwise */
  public boolean isSetBackList() {
    return this.backList != null;
  }

  public void setBackListIsSet(boolean value) {
    if (!value) {
      this.backList = null;
    }
  }

  public String getErrorCode() {
    return this.errorCode;
  }

  public BackMSG setErrorCode(String errorCode) {
    this.errorCode = errorCode;
    return this;
  }

  public void unsetErrorCode() {
    this.errorCode = null;
  }

  /** Returns true if field errorCode is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorCode() {
    return this.errorCode != null;
  }

  public void setErrorCodeIsSet(boolean value) {
    if (!value) {
      this.errorCode = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RPID:
      if (value == null) {
        unsetRpid();
      } else {
        setRpid((String)value);
      }
      break;

    case BACK_CODE:
      if (value == null) {
        unsetBackCode();
      } else {
        setBackCode((BackCode)value);
      }
      break;

    case MSG:
      if (value == null) {
        unsetMsg();
      } else {
        setMsg((String)value);
      }
      break;

    case BACK_MAP:
      if (value == null) {
        unsetBackMap();
      } else {
        setBackMap((Map<String,String>)value);
      }
      break;

    case BACK_LIST:
      if (value == null) {
        unsetBackList();
      } else {
        setBackList((List<String>)value);
      }
      break;

    case ERROR_CODE:
      if (value == null) {
        unsetErrorCode();
      } else {
        setErrorCode((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RPID:
      return getRpid();

    case BACK_CODE:
      return getBackCode();

    case MSG:
      return getMsg();

    case BACK_MAP:
      return getBackMap();

    case BACK_LIST:
      return getBackList();

    case ERROR_CODE:
      return getErrorCode();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RPID:
      return isSetRpid();
    case BACK_CODE:
      return isSetBackCode();
    case MSG:
      return isSetMsg();
    case BACK_MAP:
      return isSetBackMap();
    case BACK_LIST:
      return isSetBackList();
    case ERROR_CODE:
      return isSetErrorCode();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BackMSG)
      return this.equals((BackMSG)that);
    return false;
  }

  public boolean equals(BackMSG that) {
    if (that == null)
      return false;

    boolean this_present_rpid = true && this.isSetRpid();
    boolean that_present_rpid = true && that.isSetRpid();
    if (this_present_rpid || that_present_rpid) {
      if (!(this_present_rpid && that_present_rpid))
        return false;
      if (!this.rpid.equals(that.rpid))
        return false;
    }

    boolean this_present_backCode = true && this.isSetBackCode();
    boolean that_present_backCode = true && that.isSetBackCode();
    if (this_present_backCode || that_present_backCode) {
      if (!(this_present_backCode && that_present_backCode))
        return false;
      if (!this.backCode.equals(that.backCode))
        return false;
    }

    boolean this_present_msg = true && this.isSetMsg();
    boolean that_present_msg = true && that.isSetMsg();
    if (this_present_msg || that_present_msg) {
      if (!(this_present_msg && that_present_msg))
        return false;
      if (!this.msg.equals(that.msg))
        return false;
    }

    boolean this_present_backMap = true && this.isSetBackMap();
    boolean that_present_backMap = true && that.isSetBackMap();
    if (this_present_backMap || that_present_backMap) {
      if (!(this_present_backMap && that_present_backMap))
        return false;
      if (!this.backMap.equals(that.backMap))
        return false;
    }

    boolean this_present_backList = true && this.isSetBackList();
    boolean that_present_backList = true && that.isSetBackList();
    if (this_present_backList || that_present_backList) {
      if (!(this_present_backList && that_present_backList))
        return false;
      if (!this.backList.equals(that.backList))
        return false;
    }

    boolean this_present_errorCode = true && this.isSetErrorCode();
    boolean that_present_errorCode = true && that.isSetErrorCode();
    if (this_present_errorCode || that_present_errorCode) {
      if (!(this_present_errorCode && that_present_errorCode))
        return false;
      if (!this.errorCode.equals(that.errorCode))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(BackMSG other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRpid()).compareTo(other.isSetRpid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRpid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rpid, other.rpid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBackCode()).compareTo(other.isSetBackCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBackCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.backCode, other.backCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMsg()).compareTo(other.isSetMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, other.msg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBackMap()).compareTo(other.isSetBackMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBackMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.backMap, other.backMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBackList()).compareTo(other.isSetBackList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBackList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.backList, other.backList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErrorCode()).compareTo(other.isSetErrorCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorCode, other.errorCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BackMSG(");
    boolean first = true;

    sb.append("rpid:");
    if (this.rpid == null) {
      sb.append("null");
    } else {
      sb.append(this.rpid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("backCode:");
    if (this.backCode == null) {
      sb.append("null");
    } else {
      sb.append(this.backCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("msg:");
    if (this.msg == null) {
      sb.append("null");
    } else {
      sb.append(this.msg);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("backMap:");
    if (this.backMap == null) {
      sb.append("null");
    } else {
      sb.append(this.backMap);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("backList:");
    if (this.backList == null) {
      sb.append("null");
    } else {
      sb.append(this.backList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("errorCode:");
    if (this.errorCode == null) {
      sb.append("null");
    } else {
      sb.append(this.errorCode);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (rpid == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'rpid' was not present! Struct: " + toString());
    }
    if (backCode == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'backCode' was not present! Struct: " + toString());
    }
    if (msg == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'msg' was not present! Struct: " + toString());
    }
    if (errorCode == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'errorCode' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BackMSGStandardSchemeFactory implements SchemeFactory {
    public BackMSGStandardScheme getScheme() {
      return new BackMSGStandardScheme();
    }
  }

  private static class BackMSGStandardScheme extends StandardScheme<BackMSG> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BackMSG struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RPID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rpid = iprot.readString();
              struct.setRpidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BACK_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.backCode = BackCode.findByValue(iprot.readI32());
              struct.setBackCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.msg = iprot.readString();
              struct.setMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BACK_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.backMap = new HashMap<String,String>(2*_map0.size);
                for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                {
                  String _key2;
                  String _val3;
                  _key2 = iprot.readString();
                  _val3 = iprot.readString();
                  struct.backMap.put(_key2, _val3);
                }
                iprot.readMapEnd();
              }
              struct.setBackMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BACK_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list4 = iprot.readListBegin();
                struct.backList = new ArrayList<String>(_list4.size);
                for (int _i5 = 0; _i5 < _list4.size; ++_i5)
                {
                  String _elem6;
                  _elem6 = iprot.readString();
                  struct.backList.add(_elem6);
                }
                iprot.readListEnd();
              }
              struct.setBackListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ERROR_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.errorCode = iprot.readString();
              struct.setErrorCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BackMSG struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.rpid != null) {
        oprot.writeFieldBegin(RPID_FIELD_DESC);
        oprot.writeString(struct.rpid);
        oprot.writeFieldEnd();
      }
      if (struct.backCode != null) {
        oprot.writeFieldBegin(BACK_CODE_FIELD_DESC);
        oprot.writeI32(struct.backCode.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.msg != null) {
        oprot.writeFieldBegin(MSG_FIELD_DESC);
        oprot.writeString(struct.msg);
        oprot.writeFieldEnd();
      }
      if (struct.backMap != null) {
        oprot.writeFieldBegin(BACK_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.backMap.size()));
          for (Map.Entry<String, String> _iter7 : struct.backMap.entrySet())
          {
            oprot.writeString(_iter7.getKey());
            oprot.writeString(_iter7.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.backList != null) {
        oprot.writeFieldBegin(BACK_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.backList.size()));
          for (String _iter8 : struct.backList)
          {
            oprot.writeString(_iter8);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.errorCode != null) {
        oprot.writeFieldBegin(ERROR_CODE_FIELD_DESC);
        oprot.writeString(struct.errorCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BackMSGTupleSchemeFactory implements SchemeFactory {
    public BackMSGTupleScheme getScheme() {
      return new BackMSGTupleScheme();
    }
  }

  private static class BackMSGTupleScheme extends TupleScheme<BackMSG> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BackMSG struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.rpid);
      oprot.writeI32(struct.backCode.getValue());
      oprot.writeString(struct.msg);
      oprot.writeString(struct.errorCode);
      BitSet optionals = new BitSet();
      if (struct.isSetBackMap()) {
        optionals.set(0);
      }
      if (struct.isSetBackList()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetBackMap()) {
        {
          oprot.writeI32(struct.backMap.size());
          for (Map.Entry<String, String> _iter9 : struct.backMap.entrySet())
          {
            oprot.writeString(_iter9.getKey());
            oprot.writeString(_iter9.getValue());
          }
        }
      }
      if (struct.isSetBackList()) {
        {
          oprot.writeI32(struct.backList.size());
          for (String _iter10 : struct.backList)
          {
            oprot.writeString(_iter10);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BackMSG struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.rpid = iprot.readString();
      struct.setRpidIsSet(true);
      struct.backCode = BackCode.findByValue(iprot.readI32());
      struct.setBackCodeIsSet(true);
      struct.msg = iprot.readString();
      struct.setMsgIsSet(true);
      struct.errorCode = iprot.readString();
      struct.setErrorCodeIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map11 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.backMap = new HashMap<String,String>(2*_map11.size);
          for (int _i12 = 0; _i12 < _map11.size; ++_i12)
          {
            String _key13;
            String _val14;
            _key13 = iprot.readString();
            _val14 = iprot.readString();
            struct.backMap.put(_key13, _val14);
          }
        }
        struct.setBackMapIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.backList = new ArrayList<String>(_list15.size);
          for (int _i16 = 0; _i16 < _list15.size; ++_i16)
          {
            String _elem17;
            _elem17 = iprot.readString();
            struct.backList.add(_elem17);
          }
        }
        struct.setBackListIsSet(true);
      }
    }
  }

}

